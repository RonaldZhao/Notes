  用户向服务器发送一次http请求后，该请求可能会经过多个信息资源处理后才返回给用户，各个信息资源使用请求转发机制相互转发请求，
但是用户是感觉不到请求转发的。根据请求转发方式的不同，可以分为直接请求转发(Forward)和间接请求转发(Redirect)。

相同点：都是请求转发的一种方式。
不同点：
    Forward和Redirect代表了两种请求转发方式：直接转发和间接转发。对应到代码里，分别是RequestDispatcher类的forward()方法和
  HttpServletRequest类的sendRedirect()方法。
    对于直接方式，客户端浏览器只发出一次请求，Servlet把请求转发给Servlet、HTML、JSP或其它信息资源，由第2个信息资源响应该请求，
  两个信息资源共享同一个request对象。
    对于间接方式，服务器端在响应第一次请求的时候，让浏览器再向另外一个URL发出请求，从而达到转发的目的。它本质上是两次HTTP请求，
  对应两个request对象。
    技巧： 其实，通过浏览器就可以观察到服务器端使用了那种请求转发方式，当单机某一个超链接时，浏览器的地址栏会出现当前请求的地址，
  如果服务器端响应完成以后，发现地址栏的地址变了，则证明是间接的请求转发。相反，如果地址没有发生变化，则代表的是直接请求转发或者没有转发。

其他CSDN中的解释：
  直接转发（forward）：
      客户端和浏览器只发出一次请求，Servlet、HTML、JSP或其它信息资源，由第二个信息资源响应该请求，在请求对象request中，
    保存的对象对于一个每个信息资源是共享的。
      服务器请求资源，服务器直接访问目标地址的URL，把那个URL的相应内容读取过来，然后把这些内容再发给浏览器，浏览器根本不知道服务器发送的
    内容是从哪里来的，所以它的地址栏中还是原来的地址，转发时并不通知客户机，对象可以存储在请求中，并发给下一个资源使用，并且完全在服务
    器上面进行；
      forward是服务器内部重定向，程序收到请求后重新定向到另一个程序，客户机并不知道；redirect则是服务器收到请求后发送一个状态头给客户，
    客户将再请求一次，这里多了两次网络通信的来往。当然forward也有缺点，就是forward的页面的路径如果是相对路径就会有些问题了。

  重定向（redirect）：
      实际是两次HTTP请求，服务器端在响应第一次请求的时候，让浏览器再向另外一个URL发出请求，从而达到转发的目的。
    服务器根据逻辑，发送一个状态码，告诉浏览器重新去请求那个地址，一般来说，浏览器会用刚才请求的所有参数重新请求，
    所以session，request参数都可以获取。重定向导致浏览器发出了新的请求，在重定向之前存储为请求属性的任何对象都会消失，这也是两者最大的区别。
    Redirect后，是开始了一个新的Http请求，因此地址栏是redirect后的地址。forward保存了相关的状态信息，而redirect不保存信息。
