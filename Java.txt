多态性的体现：
  1.方法的重载和重写
  2.对象的多态性
  3.对象的多态性：
    向上转型：程序自动完成
      父类 父类对象 = 子类实例
    向下转型：强制类型转换
      子类 子类对象 = (子类)父类实例
================================================================================
泛型：
  1.泛型是在jdk1.5之后新增的功能。泛型（Generic）
  2.泛型可以解决数据类型的安全性问题，主要的原理是，在类声明的时候通过一个
    标识表示类中某个属性的类型或者是某个方法的返回值及参数类型。
  3.格式：访问权限 class 类名称<泛型、泛型...> {属性 方法}
  4.对象的创建：类名称<具体类型> 对象名称 = new 类名称<具体类型>();
  5.通配符：？表示
  6.接口中应用泛型
  7.泛型方法：其中可以定义泛型参数，此时，参数的类型就是传入数据类型
      格式：访问权限 <泛型标识> 泛型标识 方法名称([泛型标识 参数名称])
      使用：直接在参数中传递任何类型的数据
  8.泛型数组：在使用泛型方法的时候，也可以传递或返回一个泛型数组
================================================================================
Java的时间日期：
  Date类（不推荐）
  Calendar类
  DateFormat类
  Long
  String
将Date类型转换为String类型：
  SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
  sdf.format(date);
将String类型转换为Date类型：
  SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
  sdf.parse("2015-06-01");
将Date类型转换为Calendar类型：
  c1.setTime(date);
将Calendar类型转换为Date类型：
  c1.getTime();
================================================================================
StringBuilder:
  1.是一个可变的字符序列，该类被设计作用StringBuffer的一个简易替换，用在字符串缓冲区被单个线
    程使用的时候，建议优先考虑该类，速度要比StringBuffer快很多。
  2.但是如果涉及到线程安全方面，建议使用StringBuffer。
