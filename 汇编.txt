1.基础知识
    机器语言是机器指令的集合。

    汇编语言的主体是汇编指令。
    汇编指令和机器指令的差别在于指令的表示方法上。汇编指令是机器指令便于记忆的书写格式。
    汇编指令是机器指令的助记符。

    寄存器：简单的说就是CPU中可以存储数据的器件，一个CPU中有多个寄存器。

    汇编语言由以下三类组成：
        1.汇编指令(机器码的助记符)
        2.伪指令(由编译器执行)
        3.其他符号(由编译器识别)
    
    汇编语言的核心是汇编指令，它决定了汇编语言的特性。
    每一种CPU都有自己的汇编指令集。

    CPU是计算机的核心部件，它控制整个计算机的运作并进行计算，要想让一个CPU工作，就必须向它提供指令和数据。
    指令和数据在存储器(即平常所说的内存，不是硬盘)中存放。
    磁盘不同于内存，磁盘中的数据或程序如果不读入到内存中，就无法被CPU使用。

    指令和数据是应用上的概念。
    在内存或磁盘上，指令和数据没有任何区别，都是二进制信息。

    存储器被划分为若干个存储单元，每个存储单元从0开始顺序编号。
    CPU可以直接使用的信息都在存储器中存放。

    CPU要想进行数据的读写，必须和外部器件(芯片)进行三类信息的交互：
        1.存储单元的地址(地址信息)
        2.器件的选择，读或写命令(控制信息)
        3.读或写的数据(数据信息)
    
    总线：连接CPU和其他芯片的导线
        物理上：就是一根根导线的集合。
        逻辑上：
            1.地址总线
            2.数据总线
            3.控制总线
    CPU是通过地址总线来指定存储单元的。
    地址总线上能传送多少个不同的信息，CPU就可以对多少个存储单元进行寻址。
    一个CPU有N根地址总线，则可以说CPU的地址总线的宽度为N，即这个CPU为N位的CPU。这样的CPU最多可以寻找2的N次方个内存单元。
    CPU与内存或其他器件之间数据传送是通过数据总线来进行的。数据总线的宽度决定了CPU和外界的数据传送速度。
    CPU对外部器件的控制是通过控制总线来进行的。这里的控制总线是一个总称，是一些不同的控制线的集合。控制总线的宽度决定了CPU对外部器件的控制能力。

    内存地址空间：一个CPU的地址总线宽度为10，那么这个CPU可以寻址1024个内存单元，这1024个可寻到内存单元就构成这个CPU的内存地址空间。
    
    主板：每一台PC机中都有一个主板，主板上有核心器件和一些主要器件。这些器件通过总线(地址、数据、控制总线)相连接。

    计算机系统中，所有可用程序控制其工作的设备，必须受到CPU的控制。
    CPU对外部设备(如显示器、音箱、打印机等)不能直接控制，直接控制这些设备进行工作的是插在插口槽上的接口卡。

    对于CPU来说，系统中的所有存储器的存储单元都处于一个统一的逻辑存储器中，它的容量受CPU寻址能力的限制。这个逻辑存储器就是我们所说的内存地址空间。

2.寄存器(CPU的内部工作原理)
    2.1 通用寄存器
        CPU概述：
            一个典型的CPU由运算器、控制器、寄存器等器件组成，这些器件靠内部总线连接。
            内部总线和外部总线的区别：
                内部总线实现CPU内部各个器件之间的连接；
                外部总线实现CPU和主板上其他器件的连接。
        寄存器概述：
            8086CPU共有14个寄存器：AX、BX、CX、DX、SI、DI、SP、BP、IP、CS、SS、DS、ES、PSW。
        通用寄存器：
            8086CPU所有的寄存器都是16位的，可以存放两个字节。
            AX、BX、CX、DX一般用来存放一般性的数据，被称为通用寄存器。
            AX可以分为AH和AL；BX可以分为BH和BL；CX可以分为CH和CL；DX可以分为AH和DL；(H=Heigh,L=Low)
    2.2 字在寄存器中的存储
        汇编指令不区分大小写！
    2.4 物理地址
        CPU访问内存单元时要给出内存单元的地址。所有的内存单元构成的存储空间 是一个一维的线性空间。我们将这个唯一的地址称为物理地址。
    2.5 16位结构的CPU
        概括的讲，16位结构描述了一个CPU具有以下几个方面的特征：
            1.运算器一次最多可以处理16位的数据；
            2.寄存器的最大宽度为16位；
            3.运算器和寄存器之间的通路是16位的。
    2.6 8086给出物理地址的方法
        8086CPU读写内存时，发生了这些事：
            1.CPU中的相关部件提供两个16位的地址，一个称为段地址，另一个称为偏移地址；
            2.段地址和偏移地址通过内部总线送入一个称为地址加法器的部件；
            3.地址加法器将两个16位的地址合成一个20位的物理地址
            4...
        地址加法器合成物理地址的方法：物理地址=段地址*16+偏移地址。
    *CPU可以用不同的段地址和偏移地址形成同一个物理地址。
    *仅用偏移地址来寻址最多可以寻64kb个内存单元。

    小结：
        *在8086PC机中，存储单元的地址用两个元素来描述：即段地址和偏移地址。
        *“数据在21F60H内存单元中”对于8086PC来说有两种描述：
            1.数据存在内存2000:1F60单元中；
            2.数据存在内存的2000段的1F60H单元中。
        *可根据需要，将地址连续、起始地址位16的倍数的一组内存单元定义为一个段。
    2.9 段寄存器
        段寄存器就是提供段地址的。
        8086CPU有四个段寄存器：CS、DS、SS、ES。
        当8086CPU要访问内存时，由着四个段寄存器提供内存单元的段地址。

        CS和IP是8086CPU中最关键的寄存器，它们指示了当前CPU要读取指令的地址。
        CS是代码段寄存器，IP是指令指针寄存器。

        8086PC工作过程的简要概述：
            1.从CS:IP指令向内存单元读取指令，读取的指令进入指令缓冲器；
            2.IP = IP + 所读取指令的长度，从而指向下一条指令；
            3.执行指令。转到步骤一，循环。

        在8086CPU加电启动或复位后(即CPU刚开始工作时)CS和IP被设置为CS=FFFFH，IP=0000H。即在8086PC机刚启动时，CPU从内存FFFF0H单元中读取指令执行。
        FFFF0H单元中的指令是8086PC机开机后执行的第一条指令。

    2.10 CS和IP
        在任何时候，CPU将CS、IP中的内容当做指令的段地址和偏移地址，用它们合成指令的物理地址，到内存中读取指令码，执行。
    2.11 修改CS、IP的指令
        在CPU中，程序猿能够用指令读写的部件只有寄存器，程序员可以通过改变寄存器中的内容实现对CPU的控制。
        CPU从何处执行指令是由CS、IP中的内容决定的，程序员可以通过改变CS、IP中的内容来控制CPU执行目标指令。
        8086CPU为CS、IP提供了专用的指令来改变它们的值：转移指令
            同时修改CS、IP的内容：
                jmp 段地址:偏移地址
                功能：用指令中给出的段地址修改CS，偏移地址修改IP。

            仅修改IP的内容：
                jmp 某一合法的寄存器
                功能：用寄存器中的值修改IP
        
        对于8086PC机，在编程时，可以根据需要，将一组内存单元定义为一个段。
        可以将长度为n(n<=64kb)的一组代码，存在一组地址连续、起始地址为16的倍数的内存单元中，这段内存是用来存放代码的，从而定义了一个代码段。
    DEBUG:
        R命令：查看、改变CPU寄存器的内容
        D命令：查看内存中的内容
        E命令：改写内存中的内容
        U命令：将内存中的机器指令翻译成汇编指令
        T命令：执行一条机器指令
        A命令：以汇编指令的格式在内存中写入一条机器指令
3.寄存器(内存访问)
    3.1 内存中字的存储
        任何两个地址连续的内存单元，N号单元和N+1号单元，可以将它们看成两个内存单元，也可以看成一个地址位N的字单元中的高位字节单元和低位字节单元。
    3.2 DS和[address]
        CPU要读取一个内存单元的时候，必须先给出这个内存单元的地址。
        在8086PC中，内存地址由段地址和偏移地址组成。
        8086CPU中由一个DS寄存器，通常用来存放要访问的数据的段地址。

        已知的mov指令可以完成两种传送功能：
            1).将数据直接送入寄存器
            2).将一个寄存器中的内容送到另一个寄存器中
            *除此之外，mov指令还可以将一个内存单元中的内容送入一个寄存器
        
        执行指令时，8086CPU 自动获取DS中数据为内存单元的段地址。
        8086CPU 不支持将数据直接送入段寄存器的操作。(硬件设计问题)
    3.3 字的传送
        